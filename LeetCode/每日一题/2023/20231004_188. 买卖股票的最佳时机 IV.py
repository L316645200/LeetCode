#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @File  : 20231004_188. 买卖股票的最佳时机 IV.py
# @Author: Lin
# @Date  : 2023/10/7 18:40

"""给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。



示例 1：

输入：k = 2, prices = [2,4,1]
输出：2
解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
示例 2：

输入：k = 2, prices = [3,2,6,5,0,3]
输出：7
解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。


提示：

1 <= k <= 100
1 <= prices.length <= 1000
0 <= prices[i] <= 1000"""
from typing import List
"""方法一：动态规划

我们也可以使用动态规划的方法，定义 dp[i][j] 表示到第i天时，j=0为持有股票，j=1时为不持有股票，所能获得的最大利润。初始时 f[0][0]=-prices[0]，f[0][1]=0。

当 i>0时：

如果第i天持有股票，可能是第i−1天没持有股票并且在第i天买入；或者第 i−1天持有股票并且第i天不进行任何操作。因此dp[i][0] = max(dp[i][0], dp[i-1][1] - prices[i]);

如果第i天不持有股票，可能是i−1天持有股票并且在第i天卖出；或者第i−1天没持有股票并且第i天不进行任何操作。因此dp[i][1] = max(dp[i][1], dp[i][0] + prices[i]);

因为n天最多只能进行n//2次交易,因此我们可以将k对n//2取较小值之后再进行动态规划; 为了代码更简洁点，将第i天dp[i]顺延成dp[i+1];

"""

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        k = min(k, n // 2)
        dp = [[-prices[0], 0] for _ in range(k+1)]
        dp[0] = [0, 0]
        for p in prices[1:]:
            for i in range(1, k+1):
                dp[i][0] = max(dp[i][0], dp[i-1][1] - p)
                dp[i][1] = max(dp[i][1], dp[i][0] + p)
        return dp[k][1]