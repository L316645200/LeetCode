#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @File  : 第 14 天 位运算.py
# @Author: Lin
# @Date  : 2022/2/22 15:03

# 190. 颠倒二进制位
# 颠倒给定的 32 位无符号整数的二进制位。
#
# 提示：
# 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
# 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
# 示例 1：
# 输入：n = 00000010100101000001111010011100
# 输出：964176192 (00111001011110000010100101000000)
# 解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
#      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
# 示例 2：
# n = 11111111111111111111111111111101
# 输出：3221225471 (10111111111111111111111111111111)
# 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
#      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
# 提示：
# 输入是一个长度为 32 的二进制字符串
#  
# 进阶: 如果多次调用这个函数，你将如何优化你的算法？
from functools import reduce
from typing import List


class Solution:
    def reverseBits(self, n: int) -> int:
        s = '0b'
        for i in range(32):
            s += '1' if n & 1 == 1 else '0'
            n = n >> 1
        return int(s, 2)


class Solution:
    def reverseBits(self, n: int) -> int:
        res = 0
        for i in range(32):
            print(res << 1, n & 1)

            res = (res << 1) | (n & 1)
            n >>= 1
        return res



s = Solution()
s.reverseBits(0b00000010100101000001111010011100)

# 136. 只出现一次的数字给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
#
# 说明：
#
# 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
#
# 示例 1:
#
# 输入: [2,2,1]
# 输出: 1
# 示例 2:
#
# 输入: [4,1,2,1,2]
# 输出: 4

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        return reduce(lambda x,y: x^y, nums)
